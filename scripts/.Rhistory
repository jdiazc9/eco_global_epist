FUN = function(x) {
bg <- strsplit(x, split = ',')[[1]]
bg <- bg[bg != sp_i]
bg <- paste(bg, collapse = ',')
return(bg)
})
B_i_ij$background <- sapply(B_i_ij$community,
FUN = function(x) {
bg <- strsplit(x, split = ',')[[1]]
bg <- bg[bg != sp_j & bg != sp_i]
bg <- paste(bg, collapse = ',')
return(bg)
})
allF <- merge(B_i, B_i_i, by = 'background', suffixes = c('_B', '_Bi'))
allF <- merge(allF, B_i_j, by = 'background')
colnames(allF)[6:7] <- paste(colnames(allF)[6:7], '_Bj', sep = '')
allF <- merge(allF, B_i_ij, by = 'background')
colnames(allF)[8:9] <- paste(colnames(allF)[8:9], '_Bij', sep = '')
allF <- allF[, c('community_B', 'community_Bi', 'community_Bj', 'community_Bij', 'fun_B', 'fun_Bi', 'fun_Bj', 'fun_Bij')]
allF <- allF[allF$community_B == c('', 'T')[1 + thurin], ]
eps_ij <- allF$fun_Bij - (allF$fun_Bi + allF$fun_Bj - allF$fun_B) # deviation from additivity
if (!length(eps_ij)) eps_ij <- NA
if (!length(deltaF_j)) deltaF_j <- NA
#attach to output data set
params <- rbind(params,
data.frame(dataset = c(basename(files), 'pyo', 'khan')[ds],
background = c('', 'T')[1 + thurin],
species_i = paste(sp_i, thurin, sep = '_'),
species_j = sp_j,
deltaF_j = as.numeric(deltaF_j),
eps_ij = as.numeric(eps_ij)))
}
}
# plot effect sizes
plot_this <- params[params$dataset != 'khan', ]
plot_this$dataset <- gsub('_inv', '', plot_this$dataset)
plot_this$dataset <- setNames(c('Bacterial starch hydrolysis',
'Bacterial butyrate secretion',
'Phytoplankton biomass',
'Above-ground plant biomass',
'Bacterial xylose oxidation',
'Bacterial pyoverdine secretion'),
c(basename(files)[1:5], 'pyo'))[plot_this$dataset]
plot_this$dataset <- factor(plot_this$dataset, levels = c('Above-ground plant biomass',
'Phytoplankton biomass',
'Bacterial xylose oxidation',
'Bacterial starch hydrolysis',
'Bacterial butyrate secretion',
'Bacterial pyoverdine secretion'))
sp_names <- vector(mode = 'list', length = 6)
sp_names[[1]] <- setNames(c('B. cereus', 'B. megaterium', 'B. mojavensis', 'P. polymyxa', 'P. polymyxa\n(B. thuringiensis\nnot in background)', 'P. polymyxa\n(B. thuringiensis\nin background)', 'B. subtilis', 'B. thuringiensis'),
c('C', 'E', 'M', 'P', 'P_0', 'P_1', 'S', 'T'))
sp_names[[2]] <- setNames(c('P. copri','P. johnsonii','B. vulgatus','B. fragilis','B. ovatus','B. thetaiotaomicron','B. caccae','B. cellulosilyticus','B. uniformis','D. piger','B. longum','B. adolescentis','B. pseudocatenulatum','C. aerofaciens','E. lenta','F. prausnitzii','C. hiranonis','A. caccae','B. hydrogenotrophica','C. asparagiforme','E. rectale','R. intestinalis','C. comes','D. longicatena','D. formicigenerans'),
c('PC','PJ','BV','BF','BO','BT','BC','BY','BU','DP','BL','BA','BP','CA','EL','FP','CH','AC','BH','CG','ER','RI','CC','DL','DF'))
sp_names[[3]] <- setNames(c('A. carterae','Tetraselmis sp.','D. tertiolecta','Synechococcus sp.','T. lutea'),
c('A','T','D','S','Ti'))
sp_names[[4]] <- setNames(c('A. millefolium','L. capitata','P. virginianum','S. nutans','L. vulgare','L. cuneata','P. vulgaris','P. pratense'),
c('as.nat','fa.nat','la.nat','po.nat','as.inv','fa.inv','la.inv','po.inv'))
sp_names[[5]] <- setNames(c('Rhodoferax sp.','Flavobacterium sp.','Sphingoterrabacterium sp.','Burkholderia sp.','S. yanoikuyae','Bacteroidetes sp.'),
c('SL68','SL104','SL106','SL187','SL197','SLWC2'))
sp_names[[6]] <- setNames(c('Enterobacter sp.', 'Pseudomonas sp. 02', 'Klebsiella sp.', 'Pseudomonas sp. 03', 'Pseudomonas sp. 04', 'Raoultella sp.', 'Pseudomonas sp. 01', 'Pseudomonas sp. 05'),
paste('sp', 1:8, sep = '_'))
sp_names <- unlist(sp_names)
sp_names_abbr <- gsub('\\.[[:space:]]', '', sp_names)
sp_names_abbr <- substr(sp_names_abbr, 1, 2)
sp_names_abbr[2] <- 'Bme'
sp_names_abbr[3] <- 'Bmo'
sp_names_abbr[15] <- 'Bca'
sp_names_abbr[16] <- 'Bce'
sp_names_abbr[22] <- 'Cae'
sp_names_abbr[28] <- 'Cas'
sp_names_abbr[26] <- 'Acac'
sp_names_abbr[34] <- 'Acar'
sp_names_abbr[40] <- 'Lca'
sp_names_abbr[44] <- 'Lcu'
sp_names_abbr[41] <- 'Pvi'
sp_names_abbr[45] <- 'Pvu'
sp_names_abbr[c(54, 56, 57, 59, 60)] <- paste('Ps', c('02', '03', '04', '01', '05'), sep = '')
plot_this$species_i <- sp_names[plot_this$species_i]
plot_this$species_j <- sp_names_abbr[plot_this$species_j]
plot_this$product <- abs(plot_this$deltaF_j_Bi * plot_this$eps_ij)
plot_this$product_sign <- as.character(sign(plot_this$deltaF_j_Bi * plot_this$eps_ij))
View(plot_this)
plot_this$product <- abs(plot_this$deltaF_j_Bi * plot_this$eps_ij)
plot_this$product <- abs(plot_this$deltaF_j * plot_this$eps_ij)
plot_this$product_sign <- as.character(sign(plot_this$deltaF_j * plot_this$eps_ij))
plot_this <- plot_this[!is.na(plot_this$product), ]
View(plot_this)
# plot starch dataset (for main fig)
ggplot(plot_this[plot_this$dataset == 'Bacterial starch hydrolysis', ],
aes(x = deltaF_j_Bi, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6) +
scale_x_continuous(name = expression(paste(symbol("\341"), Delta, italic(F)[italic(j)], symbol("\361")[italic(B)(italic(i))], sep = '')),
breaks = pretty_breaks(n = 2),
expand = c(0.3, 0.3)) +
scale_y_continuous(name = expression(paste(symbol("\341"), italic(epsilon)[italic(ij)], symbol("\361"), sep = '')),
breaks = pretty_breaks(n = 3),
expand = c(0.3, 0.3)) +
scale_size(range = c(3, 8)) +
scale_color_manual(values = c('firebrick1', 'deepskyblue')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 12,
vjust = 0,
angle = 0),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.position = 'none')
ggplot(plot_this[plot_this$dataset == 'Bacterial starch hydrolysis', ],
aes(x = deltaF_j_Bi, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6)
# plot starch dataset (for main fig)
ggplot(plot_this[plot_this$dataset == 'Bacterial starch hydrolysis', ],
aes(x = deltaF_j, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6) +
scale_x_continuous(name = expression(paste(symbol("\341"), Delta, italic(F)[italic(j)], symbol("\361")[italic(B)(italic(i))], sep = '')),
breaks = pretty_breaks(n = 2),
expand = c(0.3, 0.3)) +
scale_y_continuous(name = expression(paste(symbol("\341"), italic(epsilon)[italic(ij)], symbol("\361"), sep = '')),
breaks = pretty_breaks(n = 3),
expand = c(0.3, 0.3)) +
scale_size(range = c(3, 8)) +
scale_color_manual(values = c('firebrick1', 'deepskyblue')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 12,
vjust = 0,
angle = 0),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.position = 'none')
ggplot(plot_this[plot_this$dataset == 'Bacterial starch hydrolysis', ],
aes(x = deltaF_j, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6)
ggplot(plot_this[plot_this$dataset == 'Bacterial starch hydrolysis', ],
aes(x = deltaF_j, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6) +
scale_x_continuous(name = expression(paste(symbol("\341"), Delta, italic(F)[italic(j)], symbol("\361")[italic(B)(italic(i))], sep = '')),
breaks = pretty_breaks(n = 2),
expand = c(0.3, 0.3)) +
scale_y_continuous(name = expression(paste(symbol("\341"), italic(epsilon)[italic(ij)], symbol("\361"), sep = '')),
breaks = pretty_breaks(n = 3),
expand = c(0.3, 0.3)) +
scale_size(range = c(3, 8)) +
scale_color_manual(values = c('firebrick1', 'deepskyblue'))
unique(plot_this$product_sign)
# plot starch dataset (for main fig)
ggplot(plot_this[plot_this$dataset == 'Bacterial starch hydrolysis', ],
aes(x = deltaF_j, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6) +
scale_x_continuous(name = expression(paste(symbol("\341"), Delta, italic(F)[italic(j)], symbol("\361")[italic(B)(italic(i))], sep = '')),
breaks = pretty_breaks(n = 2),
expand = c(0.3, 0.3)) +
scale_y_continuous(name = expression(paste(symbol("\341"), italic(epsilon)[italic(ij)], symbol("\361"), sep = '')),
breaks = pretty_breaks(n = 3),
expand = c(0.3, 0.3)) +
scale_size(range = c(3, 8)) +
scale_color_manual(values = setNames(c('firebrick1', 'black', 'deepskyblue'),
c('-1', '0', '1'))) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 12,
vjust = 0,
angle = 0),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.position = 'none')
# plot starch dataset (for main fig)
ggplot(plot_this[plot_this$dataset == 'Bacterial starch hydrolysis', ],
aes(x = deltaF_j, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6) +
scale_x_continuous(name = expression(paste(Delta, italic(F)[italic(j)]^0, sep = '')),
breaks = pretty_breaks(n = 2),
expand = c(0.3, 0.3)) +
scale_y_continuous(name = expression(paste(symbol("\341"), italic(epsilon)[italic(ij)], symbol("\361"), sep = '')),
breaks = pretty_breaks(n = 3),
expand = c(0.3, 0.3)) +
scale_size(range = c(3, 8)) +
scale_color_manual(values = setNames(c('firebrick1', 'black', 'deepskyblue'),
c('-1', '0', '1'))) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 12,
vjust = 0,
angle = 0),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.position = 'none')
# plot starch dataset (for main fig)
ggplot(plot_this[plot_this$dataset == 'Bacterial starch hydrolysis', ],
aes(x = deltaF_j, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6) +
scale_x_continuous(name = expression(paste(Delta, italic(F)[italic(j)]^0, sep = '')),
breaks = pretty_breaks(n = 2),
expand = c(0.3, 0.3)) +
scale_y_continuous(name = expression(paste(italic(epsilon)[italic(ij)]^0, sep = '')),
breaks = pretty_breaks(n = 3),
expand = c(0.3, 0.3)) +
scale_size(range = c(3, 8)) +
scale_color_manual(values = setNames(c('firebrick1', 'black', 'deepskyblue'),
c('-1', '0', '1'))) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 12,
vjust = 0,
angle = 0),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.position = 'none')
ggsave(filename = '../plots/interaction_map_starch_noavg.pdf',
device = 'pdf',
dpi = 600,
width = 350,
height = 800,
units = 'mm',
limitsize = F)
# plot all datasets (for supplementary)
datasets <- unique(plot_this$dataset)
for (ds in datasets) {
ggplot(plot_this[plot_this$dataset == ds, ],
aes(x = deltaF_j_Bi, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6) +
scale_x_continuous(name = expression(paste(symbol("\341"), Delta, italic(F)[italic(j)], symbol("\361")[italic(B)(italic(i))], sep = '')),
breaks = pretty_breaks(n = 2),
expand = c(0.3, 0.3)) +
scale_y_continuous(name = expression(paste(symbol("\341"), italic(epsilon)[italic(ij)], symbol("\361"), sep = '')),
breaks = pretty_breaks(n = 3),
expand = c(0.3, 0.3)) +
scale_size(range = c(3, 8)) +
scale_color_manual(values = c('firebrick1', 'deepskyblue')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 12,
vjust = 0,
angle = 0),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.position = 'none')
ggsave(filename = paste('../plots/interaction_map_', gsub(' ', '', ds), '.pdf', sep = ''),
device = 'pdf',
dpi = 600,
width = 350,
height = 800,
units = 'mm',
limitsize = F)
}
# plot all datasets (for supplementary)
datasets <- unique(plot_this$dataset)
for (ds in datasets) {
ggplot(plot_this[plot_this$dataset == ds, ],
aes(x = deltaF_j, y = eps_ij, size = product, color = product_sign)) +
geom_vline(xintercept = 0,
linetype = 'dashed') +
geom_hline(yintercept = 0,
linetype = 'dashed') +
# geom_point(alpha = 0.5,
#            shape = 16) +
geom_text(aes(label = species_j),
fontface = 'bold.italic') +
facet_wrap(~ species_i,
ncol = 6) +
scale_x_continuous(name = expression(paste(Delta, italic(F)[italic(j)]^0, sep = '')),
breaks = pretty_breaks(n = 2),
expand = c(0.3, 0.3)) +
scale_y_continuous(name = expression(paste(italic(epsilon)[italic(ij)]^0, sep = '')),
breaks = pretty_breaks(n = 3),
expand = c(0.3, 0.3)) +
scale_size(range = c(3, 8)) +
scale_color_manual(values = setNames(c('firebrick1', 'black', 'deepskyblue'),
c('-1', '0', '1'))) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 12,
vjust = 0,
angle = 0),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.position = 'none')
ggsave(filename = paste('../plots/interaction_map_', gsub(' ', '', ds), '.pdf', sep = ''),
device = 'pdf',
dpi = 600,
width = 350,
height = 800,
units = 'mm',
limitsize = F)
}
# use Desai's formula to quantify expected slopes from deltaF and eps_ij measurements
expected_slopes <- data.frame(dataset = character(0),
species = character(0),
expected_slope = numeric(0))
da <- unique(params$dataset)`1`
da <- unique(params$dataset)[1]
ds <- da
ds
unique(params$species_i[params$dataset == ds])
i <- 'C'
params_i <- params[params$dataset == ds & params$species_i == i, ]
View(params_i)
w_ij <- params_i$deltaF_j^2 / sum(params_i$deltaF_j^2)
w_ij
expected_slope <- sum(params_i$eps_ij * params_i$deltaF_j / sum(params_i$deltaF_j^2))
expected_slope
# use Desai's formula to quantify expected slopes from deltaF and eps_ij measurements
expected_slopes <- data.frame(dataset = character(0),
species = character(0),
expected_slope = numeric(0))
for (ds in unique(params$dataset)) {
for (i in unique(params$species_i[params$dataset == ds])) {
params_i <- params[params$dataset == ds & params$species_i == i, ]
w_ij <- params_i$deltaF_j^2 / sum(params_i$deltaF_j^2)
b_ij <- params_i$eps_ij / params_i$deltaF_j_Bi
expected_slope <- sum(params_i$eps_ij * params_i$deltaF_j / sum(params_i$deltaF_j^2))
if (!is.na(expected_slope)) {
expected_slopes <- rbind(expected_slopes,
data.frame(dataset = ds,
species = i,
expected_slope = expected_slope))
}
}
}
View(expected_slopes)
# use formula to quantify expected intercepts
expected_intercepts <- data.frame(dataset = character(0),
species = character(0),
expected_intercept = numeric(0))
ds
ds <- names(data[1])
ds
ge_data_i <- makeGEdata(matrix2string(data[[ds]]))
View(ge_data_i)
unique(ge_data_i$knock_in)
i <- 'C'
deltaF_i <- ge_data_i$d_f[ge_data_i$knock_in == i & ge_data_i$background == '']
deltaF_i
# again, P. polymyxa requires special treatment (splitting backgrounds by presence/absence of B. thuringiensis)
ds <- 1
data_i <- data[[ds]]
ge_data_i <- makeGEdata(matrix2string(data[[ds]]))
thurin <- 0
# merge data frames and plot
expected_slopes$dataset[expected_slopes$dataset == basename(files)[6]] <- basename(files)[4]
fees$dataset[fees$dataset == basename(files)[6]] <- basename(files)[4]
View(fees)
View(expected_slopes)
plot_this <- merge(fees, expected_slopes, by = c('dataset', 'species'))
plot_this$dataset <- setNames(c('Bacterial starch hydrolysis',
'Bacterial butyrate secretion',
'Phytoplankton biomass',
'Above-ground plant biomass',
'Bacterial xylose oxidation',
'Bacterial pyoverdine secretion',
'E. coli fitness'),
c(basename(files)[1:5], 'pyo', 'khan'))[plot_this$dataset]
plot_this$dataset <- factor(plot_this$dataset, levels = c('E. coli fitness',
'Above-ground plant biomass',
'Phytoplankton biomass',
'Bacterial xylose oxidation',
'Bacterial starch hydrolysis',
'Bacterial butyrate secretion',
'Bacterial pyoverdine secretion'))
plot_this$type <- c('Ecological data set', 'Genetic data set')[1 + plot_this$dataset %in% c('E. coli fitness')]
plot_this$type <- factor(plot_this$type, levels = c('Genetic data set',
'Ecological data set'))
mycolors <- setNames(c('black',
'#d6d62d',
'#66b666',
'#cb96c3',
'#d72027',
'#519ed7',
'black'),
levels(plot_this$dataset))
# plot slopes
lims <- c(min(c(plot_this$slope, plot_this$expected_slope)),
max(c(plot_this$slope, plot_this$expected_slope)))
err <- sd(plot_this$slope - plot_this$expected_slope)
View(plot_this)
ggplot(plot_this[!(plot_this$dataset == 'Bacterial starch hydrolysis' & plot_this$species == 'P'), ],
aes(x = expected_slope, y = slope, color = dataset, shape = type)) +
geom_abline(slope = 1,
intercept = 0,
color = '#d1d3d4') +
geom_abline(slope = 1,
intercept = err,
color = '#d1d3d4',
linetype = 'dashed') +
geom_abline(slope = 1,
intercept = -err,
color = '#d1d3d4',
linetype = 'dashed') +
geom_point(cex = 3) +
scale_color_manual(values = mycolors,
breaks = names(mycolors),
name = 'Data set') +
scale_shape_manual(values = c(16, 3),
name = 'Type of data set') +
scale_x_continuous(name = 'FEE slope\nexpected from theory',
limits = lims) +
scale_y_continuous(name = 'Empirical FEE slope',
limits = lims) +
theme_bw() +
theme(aspect.ratio = 1,
panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
panel.background = element_blank())
rm(list = ls())
source("C:/Users/juand/OneDrive/Documentos/GitHub/eco_global_epist/scripts/slopes_theory_vs_exp_noavg.R", echo=TRUE)
source("~/GitHub/eco_global_epist/scripts/slopes_theory_vs_exp.R", echo=TRUE)

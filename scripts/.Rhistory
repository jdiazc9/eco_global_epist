panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5, color = 'red')
print(myplot)
myplot <-
ggplot(rsq, aes(x = n_insample, y = mean, ymin = err_minus, ymax = err_plus, color = metric)) +
geom_errorbar(width = 0) +
geom_line() +
geom_point(cex = 3) +
scale_x_continuous(name = 'Fraction of communities in sample',
breaks = pretty_breaks(n = 4)) +
scale_y_continuous(name = expression(paste('Predicted vs. observed ',italic(R^2))),
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'),
sec.axis = sec_axis(trans=~.*1,
name = expression(paste(italic(F), '(', bold(s), [opt], ')', sep = '')),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'))) +
scale_color_manual(values = c('red', 'black')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.text.y.right = element_text(size = 16,
color = 'red'),
axis.title = element_text(size = 18),
axis.title.y.right = element_text(size = 18,
color = 'red'),
axis.ticks.y.right = element_line(color = 'red'),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5, color = 'red')
myplot <-
ggplot(rsq, aes(x = n_insample, y = mean, ymin = err_minus, ymax = err_plus, color = metric)) +
geom_errorbar(width = 0) +
geom_line() +
geom_point(cex = 3) +
scale_x_continuous(name = 'Fraction of communities in sample',
breaks = pretty_breaks(n = 4)) +
scale_y_continuous(name = expression(paste('Predicted vs. observed ',italic(R^2))),
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'),
sec.axis = sec_axis(trans=~.*1,
name = expression(paste(italic(F), '(', bold(s), ^2, ')', sep = '')),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'))) +
scale_color_manual(values = c('red', 'black')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.text.y.right = element_text(size = 16,
color = 'red'),
axis.title = element_text(size = 18),
axis.title.y.right = element_text(size = 18,
color = 'red'),
axis.ticks.y.right = element_line(color = 'red'),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5, color = 'red')
myplot <-
ggplot(rsq, aes(x = n_insample, y = mean, ymin = err_minus, ymax = err_plus, color = metric)) +
geom_errorbar(width = 0) +
geom_line() +
geom_point(cex = 3) +
scale_x_continuous(name = 'Fraction of communities in sample',
breaks = pretty_breaks(n = 4)) +
scale_y_continuous(name = expression(paste('Predicted vs. observed ',italic(R^2))),
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'),
sec.axis = sec_axis(trans=~.*1,
name = expression(paste(italic(F), '(', bold(s), '^2', ')', sep = '')),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'))) +
scale_color_manual(values = c('red', 'black')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.text.y.right = element_text(size = 16,
color = 'red'),
axis.title = element_text(size = 18),
axis.title.y.right = element_text(size = 18,
color = 'red'),
axis.ticks.y.right = element_line(color = 'red'),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5, color = 'red')
print(myplot)
myplot <-
ggplot(rsq, aes(x = n_insample, y = mean, ymin = err_minus, ymax = err_plus, color = metric)) +
geom_errorbar(width = 0) +
geom_line() +
geom_point(cex = 3) +
scale_x_continuous(name = 'Fraction of communities in sample',
breaks = pretty_breaks(n = 4)) +
scale_y_continuous(name = expression(paste('Predicted vs. observed ',italic(R^2))),
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'),
sec.axis = sec_axis(trans=~.*1,
name = expression(paste(italic(F), '(', bold(s[opt]), ')', sep = '')),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'))) +
scale_color_manual(values = c('red', 'black')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.text.y.right = element_text(size = 16,
color = 'red'),
axis.title = element_text(size = 18),
axis.title.y.right = element_text(size = 18,
color = 'red'),
axis.ticks.y.right = element_line(color = 'red'),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5, color = 'red')
print(myplot)
myplot <-
ggplot(rsq, aes(x = n_insample, y = mean, ymin = err_minus, ymax = err_plus, color = metric)) +
geom_errorbar(width = 0) +
geom_line() +
geom_point(cex = 3) +
scale_x_continuous(name = 'Fraction of communities in sample',
breaks = pretty_breaks(n = 4)) +
scale_y_continuous(name = expression(paste('Predicted vs. observed ',italic(R^2))),
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'),
sec.axis = sec_axis(trans=~.*1,
name = expression(paste(italic(F), '(', bold(s)[opt], ')', sep = '')),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'))) +
scale_color_manual(values = c('red', 'black')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.text.y.right = element_text(size = 16,
color = 'red'),
axis.title = element_text(size = 18),
axis.title.y.right = element_text(size = 18,
color = 'red'),
axis.ticks.y.right = element_line(color = 'red'),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5, color = 'red')
print(myplot)
myplot <-
ggplot(rsq, aes(x = n_insample, y = mean, ymin = err_minus, ymax = err_plus, color = metric)) +
geom_errorbar(width = 0) +
geom_line() +
geom_point(cex = 3) +
scale_x_continuous(name = 'Fraction of communities in sample',
breaks = pretty_breaks(n = 4)) +
scale_y_continuous(name = expression(paste('Predicted vs. observed ',italic(R^2))),
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'),
sec.axis = sec_axis(trans=~.*1,
name = expression(paste(italic(F), '( ', bold(s)[opt], ' )', sep = '')),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'))) +
scale_color_manual(values = c('red', 'black')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.text.y.right = element_text(size = 16,
color = 'red'),
axis.title = element_text(size = 18),
axis.title.y.right = element_text(size = 18,
color = 'red'),
axis.ticks.y.right = element_line(color = 'red'),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5, color = 'red')
print(myplot)
myplot <-
ggplot(rsq, aes(x = n_insample, y = mean, ymin = err_minus, ymax = err_plus, color = metric)) +
geom_errorbar(width = 0) +
geom_line() +
geom_point(cex = 3) +
scale_x_continuous(name = 'Fraction of communities in sample',
breaks = pretty_breaks(n = 4)) +
scale_y_continuous(name = expression(paste('Predicted vs. observed ',italic(R^2))),
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'),
sec.axis = sec_axis(trans=~.*1,
name = expression(paste(italic(F), ' ( ', bold(s)[opt], ' ) / ', italic(F)[max], sep = '')),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1'))) +
scale_color_manual(values = c('red', 'black')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.text.y.right = element_text(size = 16,
color = 'red'),
axis.title = element_text(size = 18),
axis.title.y.right = element_text(size = 18,
color = 'red'),
axis.ticks.y.right = element_line(color = 'red'),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5, color = 'red')
print(myplot)
source("~/projects/eco_global_epist/scripts/figS3.R", echo=TRUE)
source("~/projects/eco_global_epist/scripts/figS3.R", echo=TRUE)
tst <- c('#8b8131',
'#ddc85d',
'#518b3f',
'#86c65e',
'#5ea5be',
'#b199c1',
'#c25ea4',
'#662b85')
tst
tst[(length(tst):1)]
rm(list = ls())
# load auxiliary functions
source('./ecoFunctions.R')
library(scales)
library(gridExtra)
library(tidyverse)
library(cowplot)
# load data sets
files <- list.files('../pyoverdine_data', full.names = T, recursive = F, pattern = '.csv')
data <- lapply(files, FUN = function(file) read.csv(file))
data <- lapply(data,
FUN = function(data) cbind(data[, 1:8], fun = rowMeans(data[, 9:ncol(data)])))
data <- do.call(rbind, data)
data <- matrix2string(data)
# species names
sp_names <- setNames(c('Enterobacter sp.',
'Pseudomonas sp. 02',
'Klebsiella sp.',
'Pseudomonas sp. 03',
'Pseudomonas sp. 04',
'Raoultella sp.',
'Pseudomonas sp. 01',
'Pseudomonas sp. 05'),
paste('sp', 1:8, sep = '_'))
# wrapper function: randomize data, return FEE coefficients for each species and r_sqaured of predicted vs. observed function
randomFEEs <- function(data) {
# FEEs in randomized data
data.rnd <- data.frame(community = data$community,
fun = sample(data$fun, size = nrow(data), replace = F))
ge_data <- makeGEdata(data.rnd)
fits <- makeFEEs(ge_data)
fits <- data.frame(species = rownames(fits),
a = fits[, 'a'],
b = fits[, 'b'])
# leave 20% of data out of sample
which_oos <- sample(1:nrow(data.rnd), size = round(0.2*nrow(data.rnd)), replace = F)
oos.rnd <- data.rnd[which_oos, ]
data.rnd <- data.rnd[-which_oos, ]
oos <- data[which_oos, ]
data <- data[-which_oos, ]
if ('' %in% oos$community) {
data.rnd <- rbind(data.rnd, oos.rnd[oos.rnd$community == '', ])
data <- rbind(data, oos[oos$community == '', ])
oos.rnd <- oos[oos.rnd$community != '', ]
oos <- oos[oos$community != '', ]
}
# predict using randomized data
ge_data.rnd <- makeGEdata(data.rnd)
eps.rnd <- inferAllResiduals(ge_data.rnd)
predF.rnd <- predictF_fullClosure(oos.rnd$community, data.rnd, eps.rnd)
po.rnd <- merge(predF.rnd, oos.rnd, by = 'community', suffixes = c('_pred', '_obs'))
r_squared.rnd <- cor(po.rnd$fun_pred, po.rnd$fun_obs)^2
# predict using true data
ge_data <- makeGEdata(data)
eps <- inferAllResiduals(ge_data)
predF <- predictF_fullClosure(oos$community, data, eps)
po <- merge(predF, oos, by = 'community', suffixes = c('_pred', '_obs'))
r_squared <- cor(po$fun_pred, po$fun_obs)^2
# output
return(list(fits = fits,
po = po,
po.rnd = po.rnd,
r_squared = r_squared,
r_squared.rnd = r_squared.rnd))
}
# do 500 randomizations
rsq <- NULL
rsq.rnd <- NULL
fits <- data.frame(run = numeric(0),
species = character(0),
a = numeric(0),
b = numeric(0))
for (i in 1:1) {
print(i)
run <- randomFEEs(data)
rsq <- c(rsq, run$r_squared)
rsq.rnd <- c(rsq.rnd, run$r_squared.rnd)
fits <- rbind(fits, cbind(run = i, run$fits))
}
# plot FEEs in randomized data
data.rnd <- data.frame(community = data$community,
fun = sample(data$fun, size = nrow(data), replace = F))
ge_data.rnd <- makeGEdata(data.rnd)
ge_data.rnd$knock_in <- sp_names[ge_data.rnd$knock_in]
ge_data.rnd$knock_in <- factor(ge_data.rnd$knock_in, levels = c("Pseudomonas sp. 01",
"Pseudomonas sp. 02",
"Pseudomonas sp. 03",
"Pseudomonas sp. 04",
"Pseudomonas sp. 05",
"Enterobacter sp.",
"Raoultella sp.",
"Klebsiella sp.")) # ordered from higher to lower function in monoculture
myplot <-
ggplot(ge_data.rnd, aes(x = background_f, y = d_f)) +
geom_abline(slope = 0, intercept = 0,
color = '#d1d3d4') +
geom_point(color = 'black',
cex = 1.5,
shape = 16) +
geom_smooth(method = 'lm',
formula = y~x,
color = 'firebrick1',
se = F,
fullrange = T) +
scale_x_continuous(breaks = pretty_breaks(n = 3),
name = 'Function of ecological background [uM]') +
scale_y_continuous(breaks = pretty_breaks(n = 3),
name = 'dF [uM]') +
facet_wrap(~knock_in,
nrow = 2) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 0.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5)
print(myplot)
# plot a vs. b (true vs randomized landscapes)
fits.true <- makeFEEs(makeGEdata(data))
fits <- rbind(data.frame(run = 'true',
species = rownames(fits.true),
a = fits.true[, 'a'],
b = fits.true[, 'b']),
fits)
fits$color <- fits$species
fits$color[fits$run != 'true'] <- 'Randomized data'
fits$color[fits$run == 'true'] <- sp_names[fits$color[fits$run == 'true']]
fits$color <- factor(fits$color, levels = c("Pseudomonas sp. 01",
"Pseudomonas sp. 02",
"Pseudomonas sp. 03",
"Pseudomonas sp. 04",
"Pseudomonas sp. 05",
"Enterobacter sp.",
"Raoultella sp.",
"Klebsiella sp.",
"Randomized data"))
myplot <-
ggplot(fits, aes(x = a, y = b, color = color, alpha = color, size = color)) +
geom_point(shape = 16) +
scale_color_manual(values = c("#662b85",
"#c25ea4",
"#b199c1",
"#5ea5be",
"#86c65e",
"#518b3f","#ddc85d",
"#8b8131"
'black'),
name = '') +
scale_alpha_manual(values = c(rep(1, 8), 0.2),
guide = 'none') +
scale_size_manual(values = c(rep(3, 8), 2),
guide = 'none') +
scale_x_continuous(name = 'FEE intercept [uM]',
breaks = pretty_breaks(n = 3)) +
scale_y_continuous(name = 'FEE slope',
breaks = pretty_breaks(n = 3)) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
panel.border = element_blank(),
panel.background = element_blank()) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5)
myplot <-
ggplot(fits, aes(x = a, y = b, color = color, alpha = color, size = color)) +
geom_point(shape = 16) +
scale_color_manual(values = c("#662b85",
"#c25ea4",
"#b199c1",
"#5ea5be",
"#86c65e",
"#518b3f",
"#ddc85d",
"#8b8131",
'black'),
name = '') +
scale_alpha_manual(values = c(rep(1, 8), 0.2),
guide = 'none') +
scale_size_manual(values = c(rep(3, 8), 2),
guide = 'none') +
scale_x_continuous(name = 'FEE intercept [uM]',
breaks = pretty_breaks(n = 3)) +
scale_y_continuous(name = 'FEE slope',
breaks = pretty_breaks(n = 3)) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
panel.border = element_blank(),
panel.background = element_blank()) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5)
print(myplot)
myplot <-
ggplot(fits, aes(x = a, y = b, color = color, alpha = color, size = color)) +
geom_point(shape = 16) +
scale_color_manual(values = c('#8b8131',
'#ddc85d',
'#518b3f',
'#86c65e',
'#5ea5be',
'#b199c1',
'#c25ea4',
'#662b85',
'black'),
name = '') +
scale_alpha_manual(values = c(rep(1, 8), 0.2),
guide = 'none') +
scale_size_manual(values = c(rep(3, 8), 2),
guide = 'none') +
scale_x_continuous(name = 'FEE intercept [uM]',
breaks = pretty_breaks(n = 3)) +
scale_y_continuous(name = 'FEE slope',
breaks = pretty_breaks(n = 3)) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
panel.border = element_blank(),
panel.background = element_blank()) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5)
print(myplot)

width = 0.7,
position = 'dodge') +
facet_wrap(~dataset,
nrow = 1) +
scale_y_continuous(name = 'R2',
limits = c(0, 1),
breaks = pretty_breaks(n = 4)) +
scale_color_manual(values = c('white', 'white', 'white',
'black', 'black', 'black')) +
#scale_fill_manual(values = c('#99d7dc', '#176766', '#b33a3b')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
View(rsq)
rsq$invasives
!rsq$invasives
rsq$natives <- !rsq$invasives
ggplot(rsq, aes(x = method, y = r2, fill = interaction(method, natives), color = interaction(method, natives))) +
geom_bar(stat = 'identity',
width = 0.7,
position = 'dodge') +
facet_wrap(~dataset,
nrow = 1) +
scale_y_continuous(name = 'R2',
limits = c(0, 1),
breaks = pretty_breaks(n = 4)) +
scale_color_manual(values = c('white', 'white', 'white',
'black', 'black', 'black')) +
#scale_fill_manual(values = c('#99d7dc', '#176766', '#b33a3b')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
ggplot(rsq, aes(x = method, y = r2, fill = interaction(method, natives), color = interaction(method, natives))) +
geom_bar(stat = 'identity',
width = 0.7,
position = 'dodge') +
facet_wrap(~dataset,
nrow = 1) +
scale_y_continuous(name = 'R2',
limits = c(0, 1),
breaks = pretty_breaks(n = 4)) +
scale_color_manual(values = c('black', 'black', 'black',
'white', 'white', 'white')) +
#scale_fill_manual(values = c('#99d7dc', '#176766', '#b33a3b')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
ggplot(rsq, aes(x = method, y = r2, fill = interaction(method, natives), color = interaction(method, natives))) +
geom_bar(stat = 'identity',
width = 0.7,
position = 'dodge') +
facet_wrap(~dataset,
nrow = 1) +
scale_y_continuous(name = 'R2',
limits = c(0, 1),
breaks = pretty_breaks(n = 4)) +
scale_color_manual(values = c('#99d7dc', '#176766', '#b33a3b',
'white', 'white', 'white')) +
#scale_fill_manual(values = c('#99d7dc', '#176766', '#b33a3b')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
ggplot(rsq, aes(x = method, y = r2, fill = interaction(method, natives), color = interaction(method, natives))) +
geom_bar(stat = 'identity',
width = 0.7,
position = 'dodge') +
facet_wrap(~dataset,
nrow = 1) +
scale_y_continuous(name = 'R2',
limits = c(0, 1),
breaks = pretty_breaks(n = 4)) +
scale_color_manual(values = c('#99d7dc', '#176766', '#b33a3b',
'white', 'white', 'white')) +
scale_fill_manual(values = c('white', 'white', 'white',
'#99d7dc', '#176766', '#b33a3b')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
ggplot(rsq, aes(x = method, y = r2, fill = interaction(method, natives), color = interaction(method, natives))) +
geom_bar(stat = 'identity',
width = 0.5,
position = 'dodge') +
facet_wrap(~dataset,
nrow = 1) +
scale_y_continuous(name = 'R2',
limits = c(0, 1),
breaks = pretty_breaks(n = 4)) +
scale_color_manual(values = c('#99d7dc', '#176766', '#b33a3b',
'white', 'white', 'white')) +
scale_fill_manual(values = c('white', 'white', 'white',
'#99d7dc', '#176766', '#b33a3b')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
ggsave(filename = '../plots/stitching_vs_regression_R2.pdf',
device = 'pdf',
dpi = 600,
width = 200,
height = 150,
units = 'mm',
limitsize = F)
ggplot(rsq, aes(x = method, y = r2, fill = interaction(method, natives), color = interaction(method, natives))) +
geom_bar(stat = 'identity',
width = 0.6,
position = 'dodge') +
facet_wrap(~dataset,
nrow = 1) +
scale_y_continuous(name = 'R2',
limits = c(0, 1),
breaks = pretty_breaks(n = 4)) +
scale_color_manual(values = c('#99d7dc', '#176766', '#b33a3b',
'white', 'white', 'white')) +
scale_fill_manual(values = c('white', 'white', 'white',
'#99d7dc', '#176766', '#b33a3b')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
ggsave(filename = '../plots/stitching_vs_regression_R2.pdf',
device = 'pdf',
dpi = 600,
width = 200,
height = 150,
units = 'mm',
limitsize = F)
ggplot(res_full, aes(x = pred, y = obs, shape = invasives)) +
geom_abline(slope = 1,
intercept = 0,
color = '#d1d3d4') +
geom_point() +
geom_blank(data = scales_limits, aes(x = pred, y = obs)) +
scale_x_continuous(breaks = pretty_breaks(n = 3),
name = expression(paste('Predicted ', italic('F'), ' [a.u.]', sep = ''))) +
scale_y_continuous(breaks = pretty_breaks(n = 3),
name = expression(paste('Observed ', italic('F'), ' [a.u.]', sep = ''))) +
scale_shape_manual(values = c(16, 1)) +
facet_wrap(method~dataset,
scales = 'free',
nrow = 3) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5)
ggplot(res_full, aes(x = pred, y = obs, shape = invasives)) +
geom_abline(slope = 1,
intercept = 0,
color = '#d1d3d4') +
geom_point(cex = 2) +
geom_blank(data = scales_limits, aes(x = pred, y = obs)) +
scale_x_continuous(breaks = pretty_breaks(n = 3),
name = expression(paste('Predicted ', italic('F'), ' [a.u.]', sep = ''))) +
scale_y_continuous(breaks = pretty_breaks(n = 3),
name = expression(paste('Observed ', italic('F'), ' [a.u.]', sep = ''))) +
scale_shape_manual(values = c(16, 1)) +
facet_wrap(method~dataset,
scales = 'free',
nrow = 3) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5)
ggsave(filename = '../plots/stitching_vs_regression.pdf',
device = 'pdf',
dpi = 600,
width = 300,
height = 200,
units = 'mm',
limitsize = F)
ggplot(res_full, aes(x = pred, y = obs, shape = invasives)) +
geom_abline(slope = 1,
intercept = 0,
color = '#d1d3d4') +
geom_point(cex = 3) +
geom_blank(data = scales_limits, aes(x = pred, y = obs)) +
scale_x_continuous(breaks = pretty_breaks(n = 3),
name = expression(paste('Predicted ', italic('F'), ' [a.u.]', sep = ''))) +
scale_y_continuous(breaks = pretty_breaks(n = 3),
name = expression(paste('Observed ', italic('F'), ' [a.u.]', sep = ''))) +
scale_shape_manual(values = c(16, 1)) +
facet_wrap(method~dataset,
scales = 'free',
nrow = 3) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1,
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5)
ggsave(filename = '../plots/stitching_vs_regression.pdf',
device = 'pdf',
dpi = 600,
width = 300,
height = 200,
units = 'mm',
limitsize = F)
source("Z:/work/micro-eco/ge_paper_v2/eco_global_epist/scripts/compare_stitching_regression.R", echo=TRUE)
# load auxiliary functions
source('./ecoFunctions.R')
library(scales)
library(gridExtra)
library(cowplot)
library(tidyr)
library(CEGO)
# load data sets
files <- list.files('../data_sets', full.names = T)
data <- lapply(files, FUN = function(file) read.csv(file))
# break Kuebbing data into two subsets (invasive and native)
n_inv <- sapply(2:nrow(data[[4]]),
FUN = function(i) any(data[[4]][i, 5:8] != 0))
data[[6]] <- data[[4]][c(TRUE, n_inv), c(5:9)]
data[[4]] <- data[[4]][c(TRUE, !n_inv), c(1:4, 9)]
files [6] <- paste(files[4], '_inv', sep = '')
# add our own data (pyoverdine secretion)
data[[7]] <- read.csv('../pyoverdine_data/training_set.csv')
data[[7]]$function. <- rowMeans(data[[7]][, 9:11])
data[[7]] <- data[[7]][, c(1:8, 12)]
test_set <- read.csv('../pyoverdine_data/test_set.csv')
test_set$function. <- rowMeans(test_set[, c(9, 10)])
test_set <- test_set[, c(1:8, 11)]
data[[7]] <- rbind(data[[7]], test_set)
# add genetic data
data[[8]] <- read.csv('../genetic_data_sets/Khan_fitness.csv')
names(data) <- c(basename(files), 'pyo', 'khan')
# average function of repeats
data <- lapply(data,
FUN = function(data_i) aggregate(formula = function. ~., data = data_i, FUN = mean))
# scale values for phytoplankton data
data[[3]]$function. <- data[[3]]$function./1e4
# get (empirical) slopes for every species in every data set
ge_data <- lapply(data, FUN = function(x) makeGEdata(matrix2string(x)))
fees <- lapply(ge_data, makeFEEs)
for (i in 1:length(data)) {
fees[[i]]$species <- rownames(fees[[i]])
fees[[i]]$dataset <- c(basename(files), 'pyo', 'khan')[i]
}
fees <- do.call(rbind, fees)
fees <- data.frame(dataset = fees$dataset,
species = fees$species,
slope = fees$b,
intercept = fees$a)
fees$dataset[is.na(fees$dataset)] <- 'pyo'
fees$dataset <- gsub('_inv', '', fees$dataset)
######################################################
### estimate slopes from pervasive pairwise epistasis
######################################################
params <- data.frame(dataset = character(0),
species_i = character(0),
species_j = character(0),
deltaF_j_Bi = numeric(0),
eps_ij = numeric(0),
w_ij = numeric(0),
b_ij = numeric(0)) # initialize output data set
for (ds in 1:length(data)) { # loop through data sets
print(paste('DATA SET #', ds, sep = ''))
data_i <- data[[ds]]
sp <- colnames(data_i)[1:(ncol(data_i)-1)] # species namees in dataset
for (i in 1:length(sp)) { # loop through all focal species in dataset
print(paste('   species', i))
sp_i <- sp[i] # species i
sp_other <- sp[!(sp == sp_i)] # other species
deltaF_j_Bi <- setNames(rep(NA, length(sp_other)), sp_other)
eps_ij <- setNames(rep(NA, length(sp_other)), sp_other)
for (sp_j in sp_other) { # loop through species j
# deltaF_j_Bi
B_i <- data_i[data_i[, colnames(data_i) == sp_i] == 0, ] # backgrounds of species i, B(i)
B_i_j <- B_i[B_i[, colnames(B_i) == sp_j] == 1, ] # backgrounds of i that contain species j
B_i_noj <- B_i[B_i[, colnames(B_i) == sp_j] == 0, ] # backgrounds of i that do not contain species j
deltaF_j_Bi[sp_j] <- mean(B_i_j$function., na.rm = T) - mean(B_i_noj$function., na.rm = T) # estimated avg. functional effect of species j on the backgrounds of species i
# epsilon_ij
B_i <- matrix2string(data_i[data_i[, colnames(data_i) == sp_i] == 0 & data_i[colnames(data_i) == sp_j] == 0, ]) # backgrounds of i not containing j
B_i_j <- matrix2string(data_i[data_i[, colnames(data_i) == sp_i] == 0 & data_i[colnames(data_i) == sp_j] == 1, ]) # backgrounds of i containing j
B_i_i <- matrix2string(data_i[data_i[, colnames(data_i) == sp_i] == 1 & data_i[colnames(data_i) == sp_j] == 0, ]) # backgrounds of i with no j, with i knocked in
B_i_ij <- matrix2string(data_i[data_i[, colnames(data_i) == sp_i] == 1 & data_i[colnames(data_i) == sp_j] == 1, ]) # backgrounds of i containing j, with i knocked in
B_i$background <- B_i$community
B_i_j$background <- sapply(B_i_j$community,
FUN = function(x) {
bg <- strsplit(x, split = ',')[[1]]
bg <- bg[bg != sp_j]
bg <- paste(bg, collapse = ',')
return(bg)
})
B_i_i$background <- sapply(B_i_i$community,
FUN = function(x) {
bg <- strsplit(x, split = ',')[[1]]
bg <- bg[bg != sp_i]
bg <- paste(bg, collapse = ',')
return(bg)
})
B_i_ij$background <- sapply(B_i_ij$community,
FUN = function(x) {
bg <- strsplit(x, split = ',')[[1]]
bg <- bg[bg != sp_j & bg != sp_i]
bg <- paste(bg, collapse = ',')
return(bg)
})
allF <- merge(B_i, B_i_i, by = 'background', suffixes = c('_B', '_Bi'))
allF <- merge(allF, B_i_j, by = 'background')
colnames(allF)[6:7] <- paste(colnames(allF)[6:7], '_Bj', sep = '')
allF <- merge(allF, B_i_ij, by = 'background')
colnames(allF)[8:9] <- paste(colnames(allF)[8:9], '_Bij', sep = '')
allF <- allF[, c('community_B', 'community_Bi', 'community_Bj', 'community_Bij', 'fun_B', 'fun_Bi', 'fun_Bj', 'fun_Bij')]
eps_ij[sp_j] <- mean(allF$fun_Bij - (allF$fun_Bi + allF$fun_Bj - allF$fun_B), na.rm = T) # deviation from additivity
}
#attach to output data set
params <- rbind(params,
data.frame(dataset = c(basename(files), 'pyo', 'khan')[ds],
species_i = sp_i,
species_j = sp_other,
deltaF_j_Bi = as.numeric(deltaF_j_Bi),
eps_ij = as.numeric(eps_ij)))
}
}
# P. polymyxa needs a different analysis: backgrounds have to be split between those with/without B. thuringiensis
ds <- 1
data_i <- data[[ds]]
ge_data_i <- makeGEdata(matrix2string(data[[ds]]))
sp <- colnames(data_i)[1:(ncol(data_i)-1)]
sp_i <- 'P'
sp_other <- sp[!(sp %in% c('P', 'T'))]
for (thurin in c(0, 1)) {
# observed slopes & intercepts
focal_backgrounds <- as.logical(sapply(ge_data_i$background, FUN = function(x) grepl('T', x)))
if (!thurin) focal_backgrounds <- !focal_backgrounds
obs_slope <- as.numeric(lm(data = ge_data_i[ge_data_i$knock_in == 'P' & focal_backgrounds, ], formula = d_f ~ background_f)$coefficients[2])
obs_intercept <- as.numeric(lm(data = ge_data_i[ge_data_i$knock_in == 'P' & focal_backgrounds, ], formula = d_f ~ background_f)$coefficients[1])
fees <- rbind(fees,
data.frame(dataset = basename(files)[ds],
species = paste('P', thurin, sep = '_'),
slope = obs_slope,
intercept = obs_intercept))
# parameters to calculate expected slopes
deltaF_j_Bi <- setNames(rep(NA, length(sp_other)), sp_other)
eps_ij <- setNames(rep(NA, length(sp_other)), sp_other)
for (sp_j in sp_other) { # loop through species j
# deltaF_j_Bi
B_i <- data_i[data_i[, colnames(data_i) == sp_i] == 0 & data_i[, colnames(data_i) == 'T'] == thurin, ] # backgrounds of polymyxa that contain or do not contain B. thuringiensis
B_i_j <- B_i[B_i[, colnames(B_i) == sp_j] == 1, ] # backgrounds of i that contain species j
B_i_noj <- B_i[B_i[, colnames(B_i) == sp_j] == 0, ] # backgrounds of i that do not contain species j
deltaF_j_Bi[sp_j] <- mean(B_i_j$function., na.rm = T) - mean(B_i_noj$function., na.rm = T) # estimated avg. functional effect of species j on the backgrounds of species i
# epsilon_ij
B_i <- matrix2string(data_i[data_i[, colnames(data_i) == sp_i] == 0 & data_i[colnames(data_i) == sp_j] == 0 & data_i[colnames(data_i) == 'T'] == thurin, ]) # backgrounds of i not containing j
B_i_j <- matrix2string(data_i[data_i[, colnames(data_i) == sp_i] == 0 & data_i[colnames(data_i) == sp_j] == 1  & data_i[colnames(data_i) == 'T'] == thurin, ]) # backgrounds of i containing j
B_i_i <- matrix2string(data_i[data_i[, colnames(data_i) == sp_i] == 1 & data_i[colnames(data_i) == sp_j] == 0  & data_i[colnames(data_i) == 'T'] == thurin, ]) # backgrounds of i with no j, with i knocked in
B_i_ij <- matrix2string(data_i[data_i[, colnames(data_i) == sp_i] == 1 & data_i[colnames(data_i) == sp_j] == 1  & data_i[colnames(data_i) == 'T'] == thurin, ]) # backgrounds of i containing j, with i knocked in
B_i$background <- B_i$community
B_i_j$background <- sapply(B_i_j$community,
FUN = function(x) {
bg <- strsplit(x, split = ',')[[1]]
bg <- bg[bg != sp_j]
bg <- paste(bg, collapse = ',')
return(bg)
})
B_i_i$background <- sapply(B_i_i$community,
FUN = function(x) {
bg <- strsplit(x, split = ',')[[1]]
bg <- bg[bg != sp_i]
bg <- paste(bg, collapse = ',')
return(bg)
})
B_i_ij$background <- sapply(B_i_ij$community,
FUN = function(x) {
bg <- strsplit(x, split = ',')[[1]]
bg <- bg[bg != sp_j & bg != sp_i]
bg <- paste(bg, collapse = ',')
return(bg)
})
allF <- merge(B_i, B_i_i, by = 'background', suffixes = c('_B', '_Bi'))
allF <- merge(allF, B_i_j, by = 'background')
colnames(allF)[6:7] <- paste(colnames(allF)[6:7], '_Bj', sep = '')
allF <- merge(allF, B_i_ij, by = 'background')
colnames(allF)[8:9] <- paste(colnames(allF)[8:9], '_Bij', sep = '')
allF <- allF[, c('community_B', 'community_Bi', 'community_Bj', 'community_Bij', 'fun_B', 'fun_Bi', 'fun_Bj', 'fun_Bij')]
eps_ij[sp_j] <- mean(allF$fun_Bij - (allF$fun_Bi + allF$fun_Bj - allF$fun_B), na.rm = T) # deviation from additivity
}
#attach to output data set
params <- rbind(params,
data.frame(dataset = c(basename(files), 'pyo', 'khan')[ds],
species_i = paste(sp_i, thurin, sep = '_'),
species_j = sp_other,
deltaF_j_Bi = as.numeric(deltaF_j_Bi),
eps_ij = as.numeric(eps_ij)))
}
View(params)

aspect.ratio = 1.6,
#axis.text = element_text(size = 16),
#axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
View(rsq)
rsq %>% filter(!method %in% c('stitching')) %>%
ggplot(aes(x = method, y = r2, fill = interaction(method, natives), color = interaction(method, natives))) +
geom_bar(stat = 'identity',
width = 0.6,
position = 'dodge') +
facet_wrap(~dataset,
nrow = 1) +
scale_y_continuous(name = 'R2',
limits = c(0, 1),
breaks = pretty_breaks(n = 4)) +
scale_color_manual(values = c('#99d7dc', '#176766', '#b33a3b', 'darkred',
'white', 'white', 'white', 'white')) +
scale_fill_manual(values = c('white', 'white', 'white', 'white',
'#99d7dc', '#176766', '#b33a3b', 'darkred')) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
#axis.text = element_text(size = 16),
#axis.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = 'bottom') +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5) +
annotate("segment", x=-Inf, xend=Inf, y=Inf, yend=Inf, size=0.5) +
annotate("segment", x=Inf, xend=Inf, y=-Inf, yend=Inf,size=0.5)
#########################################
##  plot unregularized regression R^2  ##
########################################
colnames(lm_res) <- c('Dataset', 'First Order', 'Second Order')
lm_res %>% pivot_longer(-Dataset) %>% ggplot(aes(x = name, y = value, fill = name)) +
geom_bar(stat = 'identity', width = 0.6, position = 'dodge') +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank()) +
facet_wrap(~Dataset, nrow = 1) +
ylab(expression(R^2)) +
labs(fill = '') +
ggtitle('Summary of unregularized regression fits')
# top and bottom-performing communities
threshold <- 0.1
top_bottom <- do.call(data.frame, aggregate(formula = obs ~ inter,
data = res_full,
FUN = function(x) quantile(x, probs = c(threshold, 1 - threshold))))
colnames(top_bottom)[2:3] <- c('lower_bound', 'upper_bound')
which_top_bottom <- sapply(1:nrow(res_full),
FUN = function(i) {
res_full$obs[i] < top_bottom$lower_bound[top_bottom$inter == res_full$inter[i]] | res_full$obs[i] > top_bottom$upper_bound[top_bottom$inter == res_full$inter[i]]
})
res_top_bottom <- res_full[which_top_bottom, ]
# top and bottom-performing communities
threshold <- 0.1
top_bottom <- do.call(data.frame, aggregate(obs ~ inter,
data = res_full,
FUN = function(x) quantile(x, probs = c(threshold, 1 - threshold))))
colnames(top_bottom)[2:3] <- c('lower_bound', 'upper_bound')
which_top_bottom <- sapply(1:nrow(res_full),
FUN = function(i) {
res_full$obs[i] < top_bottom$lower_bound[top_bottom$inter == res_full$inter[i]] | res_full$obs[i] > top_bottom$upper_bound[top_bottom$inter == res_full$inter[i]]
})
res_top_bottom <- res_full[which_top_bottom, ]
res_top_bottom$err <- abs(res_top_bottom$pred - res_top_bottom$obs)
res_top_bottom$rel_err <- log10(abs(res_top_bottom$pred - res_top_bottom$obs)/res_top_bottom$obs)
ggplot(res_top_bottom, aes(x = method, y = rel_err, fill = interaction(method, !invasives), color = interaction(method, !invasives))) +
geom_boxplot(outlier.colour = 'gray',
width = 0.5) +
facet_wrap(~dataset,
nrow = 1,
scales = 'free_y') +
scale_y_continuous(name = expression(log[10]~'|'*italic(F)['pred'] - italic(F)['obs']*'|'*'/'*italic(F)['obs']),
breaks = pretty_breaks(n = 4))
#########################################
##  plot unregularized regression R^2  ##
########################################
colnames(lm_res) <- c('Dataset', 'First Order', 'Second Order')
lm_res %>% pivot_longer(-Dataset) %>% ggplot(aes(x = name, y = value, fill = name)) +
geom_bar(stat = 'identity', width = 0.6, position = 'dodge') +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank()) +
facet_wrap(~Dataset, nrow = 1) +
ylab(expression(R^2)) +
labs(fill = '') +
ggtitle('Summary of unregularized regression fits')
lm_res %>% pivot_longer(-Dataset) %>% ggplot(aes(x = name, y = value, fill = name)) +
geom_bar(stat = 'identity', width = 0.6, position = 'dodge') +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = 'italic',
size = 10),
aspect.ratio = 1.6,
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
#panel.border = element_blank(),
panel.background = element_blank()) +
scale_fill_manual(values = c('gray', 'black')) +
facet_wrap(~Dataset, nrow = 1) +
ylab(expression(R^2)) +
labs(fill = '') +
ggtitle('Summary of unregularized regression fits')
View(lm_res)
range(lm_res$`First Order`)
range(lm_res$`Second Order`)
ggsave(filename = '../plots/unregR2.pdf',
device = 'pdf',
dpi = 600,
width = 230,
height = 150,
units = 'mm',
limitsize = F)
rm(list = ls())
source('./ecoFunctions.R')
source('./auxFunctions.R')
library(ggh4x)
# load data
files <- c(list.files('../data_sets', full.names = T),
'../pyoverdine_data/training_set.csv', '../pyoverdine_data/test_set.csv')
data <- lapply(1:length(files),
FUN = function(i) {
df <- read.csv(files[i], header = T)
if (i == 3) df$function. <- df$function. / 1e4
if (i %in% c(6, 7)) df <- cbind(df[, 1:8],
function. = rowMeans(df[, 9:ncol(df)]))
df <- aggregate(function. ~ .,
data = df,
FUN = mean)
return(df)
})
data[[6]] <- rbind(data[[6]], data[[7]])
data <- data[1:6]
data[[1]]
rm(list = ls())
source('./ecoFunctions.R')
source('./auxFunctions.R')
library(ggh4x)
# load data
files <- c(list.files('../data_sets', full.names = T),
'../pyoverdine_data/training_set.csv', '../pyoverdine_data/test_set.csv')
data <- lapply(1:length(files),
FUN = function(i) {
df <- read.csv(files[i], header = T)
if (i == 3) df$function. <- df$function. / 1e4
if (i %in% c(6, 7)) df <- cbind(df[, 1:8],
function. = rowMeans(df[, 9:ncol(df)]))
df <- aggregate(function. ~ .,
data = df,
FUN = mean)
colnames(df)[ncol(df)] <- 'fun'
return(df)
})
data[[6]] <- rbind(data[[6]], data[[7]])
data <- data[1:6]
data[[1]]
df <- data[[1]]
df
evaluatePredictions(df)
files
!grepl('butyrate', files[1:6])
data <- data[!grepl('butyrate', files[1:6])]
evaluatePredictions_base(df)
po_res <- evaluatePredictions(df)
po_base <- evaluatePredictions_base(df)
po_all <- merge(po_res, po_base, by = 'community', suffixes = c('_res', '_base'))
View(po_all)
po_all <- merge(po_res, po_base, by = c('community', 'fun_true'), suffixes = c('_res', '_base'))
View(po_all)
lm_res <- lm(fun_predicted ~ fun_true,
data = po_res)
lm_res <- summary(lm(fun_predicted ~ fun_true,
data = po_res))$r.squared
lm_res
R2_res <- summary(lm(fun_predicted ~ fun_true,
data = po_res))$r.squared
R2_base <- summary(lm(fun_predicted ~ fun_true,
data = po_base))$r.squared
R2_res <- 1 - sum((po_res$fun_true - po_res$fun_predicted)^2) / sum((po_res$fun_true - mean(po_res$fun_true))^2)
R2_res <- summary(lm(fun_predicted ~ fun_true,
data = po_res))$r.squared
R2_res <- 1 - sum((po_res$fun_true - po_res$fun_predicted)^2) / sum((po_res$fun_true - mean(po_res$fun_true))^2)
R2_base <- 1 - sum((po_base$fun_true - po_base$fun_predicted)^2) / sum((po_base$fun_true - mean(po_base$fun_true))^2)
# evaluate predictions with/without residual inference
po <- do.call(rbind,
lapply(data,
FUN = function(df) {
po_res <- evaluatePredictions(df)
po_base <- evaluatePredictions_base(df)
R2_res <- summary(lm(fun_predicted ~ fun_true,
data = po_res))$r.squared
R2_base <- summary(lm(fun_predicted ~ fun_true,
data = po_base))$r.squared
return(data.frame(R2_res = R2_res,
R2_base = R2_base))
}))
View(po)
po$dataset <- basename(files[1:5])[!grepl('butyrate', files[1:5])]
files
basename(files[1:5])[!grepl('butyrate', files[1:5])]
po$dataset <- basename(files[1:6])[!grepl('butyrate', files[1:6])]
po$dataset <- setNames(c('Bacterial starch hydrolysis',
'Phytoplankton biomass',
'Above-ground plant biomass',
'Bacterial xylose oxidation',
'Bacterial pyoverdine secretion'),
basename(files[1:6])[!grepl('butyrate', files[1:6])])[po$dataset]
po$dataset <- factor(po$dataset,
levels = c('Bacterial pyoverdine secretion',
'Above-ground plant biomass',
'Phytoplankton biomass',
'Bacterial xylose oxidation',
'Bacterial starch hydrolysis'))
ts <- gather(po, method, R2, R2_res:R2_base)
View(ts)
po <- gather(po, method, R2, R2_res:R2_base)
ggplot(po, aes(x = method, y = R2, color = dataset)) +
geom_point()
ggplot(po, aes(x = method, y = R2, color = dataset)) +
geom_line() +
geom_point()
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point()
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference'))
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x + element_text(size =14,
angle = 30, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x = element_text(size =14,
angle = 30, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x = element_text(size = 14,
angle = 90, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
scale_y_continuous(name = expression(italic(R)^2~predictions~vs.~observations)) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x = element_text(size = 14,
angle = 90, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
scale_y_continuous(name = expression(italic(R)^2~predictions~vs.~observations),
limits = c(0, 1)) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x = element_text(size = 14,
angle = 90, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
scale_y_continuous(name = expression(italic(R)^2~predictions~vs.~observations),
limits = c(0, 1)) +
scale_color_manual(values = mycolors) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x = element_text(size = 14,
angle = 90, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
# plot
mycolors <- c('black',
'#d6d62d',
'#66b666',
'#cb96c3',
'#d72027')
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
scale_y_continuous(name = expression(italic(R)^2~predictions~vs.~observations),
limits = c(0, 1)) +
scale_color_manual(values = mycolors) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x = element_text(size = 14,
angle = 90, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
files
data[[2]]
evaluatePredictions(data[[2]])
summary(lm(fun_predicted ~ fun_true, data = evaluatePredictions(data[[2]])))$r.squared
summary(lm(fun_predicted ~ fun_true, data = evaluatePredictions_mult(data[[2]])))$r.squared
evaluatePredictions_mult(data[[2]])
evaluatePredictions_mult(data[[2]], fraction_out_of_sample = 2/16)
evaluatePredictions_mult(data[[2]], fraction_out_of_sample = 5/16)
evaluatePredictions_mult(data[[2]], fraction_out_of_sample = 5/16)
evaluatePredictions_mult(data[[2]], fraction_out_of_sample = 5/16)
df <- data[[2]]
po_res <- evaluatePredictions(df)
po_base <- evaluatePredictions_base(df)
po_res$fun_predicted[po_res$fun_predicted < 0] <- 0
po_base$fun_predicted[po_base$fun_predicted < 0] <- 0
R2_res <- summary(lm(fun_predicted ~ fun_true,
data = po_res))$r.squared
R2_base <- summary(lm(fun_predicted ~ fun_true,
data = po_base))$r.squared
po$R2[2] <- R2_res
po$R2[7] <- R2_base
df
po_res <- evaluatePredictions(df)
po_base <- evaluatePredictions_base(df)
R2_res <- 1 - sum((po_res$fun_true - po_res$fun_predicted)^2) / sum((po_res$fun_true - mean(po_res$fun_true))^2)
po_res$fun_predicted[po_res$fun_predicted < 0] <- 0
po_base$fun_predicted[po_base$fun_predicted < 0] <- 0
R2_res <- 1 - sum((po_res$fun_true - po_res$fun_predicted)^2) / sum((po_res$fun_true - mean(po_res$fun_true))^2)
R2_base <- 1 - sum((po_base$fun_true - po_base$fun_predicted)^2) / sum((po_base$fun_true - mean(po_base$fun_true))^2)
po$R2[2] <- R2_res
po$R2[7] <- R2_base
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
scale_y_continuous(name = expression(italic(R)^2~predictions~vs.~observations),
limits = c(0, 1)) +
scale_color_manual(values = mycolors) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x = element_text(size = 14,
angle = 90, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggplot(po, aes(x = method, y = R2, color = dataset, group = dataset)) +
geom_line() +
geom_point() +
scale_x_discrete(labels = c('No residual\ninference',
'Residual inference')) +
scale_y_continuous(name = expression(italic(R)^2~predictions~vs.~observations),
limits = c(0, 1)) +
scale_color_manual(name = 'Data set',
values = mycolors) +
theme_bw() +
theme(panel.grid = element_blank(),
aspect.ratio = 3,
axis.text = element_text(size = 16),
axis.text.x = element_text(size = 14,
angle = 90, hjust = 1),
axis.title = element_text(size = 16),
axis.title.x = element_blank(),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16),
axis.ticks.x = element_blank())
ggsave(filename ='../plots/res_vs_nores.pdf',
device = 'pdf',
dpi = 600,
width = 80,
height = 100,
units = 'mm',
limitsize = F)
ggsave(filename ='../plots/res_vs_nores.pdf',
device = 'pdf',
dpi = 600,
width = 150,
height = 200,
units = 'mm',
limitsize = F)
